Aspect	                            MySQL (Relational DB)	                                                            NoSQL (Non-relational DB)
=========================================================================================================================================================================================
Data Structure	                    Tables with rows and columns	                                                    JSON-like documents, key-value pairs, graphs, or wide-columns
Schema	                            Schema is rigid and must be defined before inserting data	                        Schema is dynamic; different documents can have different fields
Change in Structure	                You must ALTER TABLE to add/remove columns	                                        You can just add new fields in documents anytime
Joins	                            Supports JOINs for complex relations across tables	                                Typically doesn’t support joins (except some like MongoDB 3.2+)
Use Case:                           E-commerce	Best for orders, inventory, and transactions	                        Best for storing product reviews or user preferences
Use Case:                           Banking System	Excellent for ACID transactions, account balance updates	        Not suitable for systems requiring strong consistency
Use Case:                           IoT Data	                                                                        Perfect for handling time-series or sensor data (e.g., InfluxDB)
Scalability	                        Vertical scaling (upgrade server hardware)	                                        Horizontal scaling (add more servers)
Performance for Reads/Writes	    Great for complex queries and structured reads	                                    Excellent for large-scale inserts and simple reads
Storage Overhead	                Normalized data = less redundancy but complex queries	                            Denormalized = more redundancy but faster retrieval
Example Use Case:                   Social Media User relationships in MySQL (users, friends, likes tables)	            Use graph DB (like Neo4j) for friend-of-a-friend, recommendations







Industry	                    Use Case	                                            Preferred DB	                            Why?
=====================================================================================================================================================================================================
Finance/Banking	                Account balances, transactions, audit logs	            MySQL / PostgreSQL	                        ACID-compliant, strong consistency, transactional support
Social Media	                Posts, comments, likes, relationships	                NoSQL (MongoDB, Neo4j)	                    Handles unstructured data, graph relationships
Retail/E-commerce	            Inventory, product catalog, order tracking	            Mixed (MySQL + MongoDB)	                    MySQL for orders, NoSQL for flexible product details
IoT/Telemetry	                Sensor data, logs, device metrics	                    NoSQL (InfluxDB, Cassandra)	                High write throughput, time-series support
Real-Time Chat	                Messages, user presence	                                NoSQL (Redis, Firebase)	                    In-memory speed, real-time updates
Blog/Content Sites	            Articles, tags, comments	                            NoSQL (MongoDB)	                            Flexible schema for evolving content
ERP Systems	                    Invoices, procurement, HR	                            MySQL / Oracle	                            Complex structured data and business rules
Healthcare	                    Patient records, prescriptions, appointments	        MySQL + NoSQL (hybrid)	                    Secure transactions + flexible patient metadata










DDL	            DML	            DCL	            TCL
===========================================================

CREATE	        SELECT	        GRANT	        BEGIN
ALTER	        INSERT	        REVOKE	        COMMIT
DROP	        UPDATE	        DENY	        ROLLBACK
TRUNCATE	    DELETE	        AUDIT	        SAVEPOINT
RENAME	        MERGE	        NOAUDIT	        RELEASE









Why TRUNCATE is DDL, Not DML
=============================
The key reason TRUNCATE is classified as DDL (Data Definition Language) and DELETE is classified as DML (Data Manipulation Language) lies in how they interact with the database structure:

Structural vs. Data Operation:
------------------------------
TRUNCATE: A DDL command operates at the schema level, meaning it does not simply remove data but also involves modifying the internal structure of the table to deallocate the data pages. It acts more like redefining the table’s data.
DELETE: A DML command works at the data level. It manipulates the data rows in the table and does not affect the table structure. It is a part of data manipulation rather than schema modification.


Logging Behavior:
-----------------
TRUNCATE: It does not log each individual row deletion; it only logs the deallocation of data pages. As a result, it's faster but also less flexible for transactions.
DELETE: Each row deletion is logged individually, meaning it can be rolled back and is more suitable for row-by-row operations (even if you delete all rows).


Impact on Triggers and Constraints:
------------------------------------
TRUNCATE: Does not fire triggers because it's considered a structural operation, and constraints like foreign keys may prevent it if the table is referenced elsewhere.
DELETE: Fires triggers (if any are defined) for each row deleted and does not require any foreign key constraints to be dropped.


Rollback and Transactions:
--------------------------
TRUNCATE is less transactional because, while some databases may allow rolling it back, it is typically treated as a permanent operation (like dropping a table) when committed.
DELETE allows for full transaction control with rollback functionality in most systems.











Character Data Types:
======================
CHAR: Stores fixed-length strings. The length of the string is specified when creating the column. It's padded with spaces if the string is shorter than the specified length.
VARCHAR: Stores variable-length strings. You specify the maximum length, but it only uses the amount of space required to store the string.
TEXT: Used for large text strings, such as articles, descriptions, or comments. It can store much larger amounts of data than VARCHAR.


Numeric Data Types:
==================
INT: Used to store integers. Typically used for primary keys, counters, or age.
FLOAT: Stores floating-point numbers with single precision.
DOUBLE: Stores floating-point numbers with double precision (higher precision than FLOAT).
DECIMAL or NUMERIC: Used for fixed-point numbers, commonly used for monetary values where precision is important


Date and Time Data Types:
=========================
DATE: Stores a date value (YYYY-MM-DD). Common for birthdates, hire dates, or event dates.
TIME: Stores a time value (HH:MM:SS). Useful for events or transactions that happen at specific times.
DATETIME: Stores both date and time values (YYYY-MM-DD HH:MM:SS). Useful for logging timestamps of actions or events.
TIMESTAMP: Stores both date and time with automatic updating when the row is modified.


Boolean Data Type:
==================
BOOLEAN: Stores either TRUE or FALSE. Often used for binary data, such as flags or yes/no options.


Binary Data Types:
==================
BLOB (Binary Large Object): Used for storing large binary data such as images, audio, or video.
VARBINARY: Stores binary data with a variable length, useful for storing files or encrypted data.








*****
LIMIT 9             =>      first 9 records
LIMIT 9,4           =>      4 records start from 9
LIMIT 9 OFFSET 4    =>      9 records start from 5 







JOINs 
======

left            =>      common + left
right           =>      right + common
inner           =>      only common
self            =>      join with same table like for manager and employee tables
cross           =>      cartesian product of two tables aXb
full outer      =>      left join union right join







JOIN Type	        NULLs in Result?	        Why?
=======================================================================
INNER JOIN	        ❌ No	                  Only matching rows are returned
LEFT JOIN	        ✅ Yes (Right side)	      Left rows kept even if no right match
RIGHT JOIN	        ✅ Yes (Left side)	      Right rows kept even if no left match
FULL OUTER JOIN	    ✅ Yes (Both sides)	      Shows unmatched rows from both tables
CROSS JOIN	        ❌ No	                  Every combination is returned — no match needed
SELF JOIN	        ✅ If no match	          NULLs if no matching reference within the same table







UNION VS UNION ALL 
=========================
The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL

------------------
Every SELECT statement within UNION must have the same number of columns
The columns must also have similar data types
The columns in every SELECT statement must also be in the same order









ONE QUERY WHICH INCLUDES => JOIN,HAVING,LIMIT,WHERE,GTOUP BY, ORDER BY 
SELECT 
    c.customer_id,
    c.name,
    SUM(o.amount) AS total_spent
FROM 
    customers c
JOIN 
    orders o ON c.customer_id = o.customer_id
WHERE 
    c.country = 'USA' AND o.status = 'complete'
GROUP BY 
    c.customer_id, c.name
HAVING 
    total_spent > 600
ORDER BY 
    total_spent DESC
LIMIT 2;












CREATE TABLE TestTable AS
SELECT customername, contactname
FROM customers;
====================================
Create a new table named TestTable.
Copy specific columns (customername, contactname) from the existing customers table into TestTable.
It copies both the structure (columns) and the data (rows).
🧠 Important Notes:
The new table will not include constraints like primary keys, foreign keys, indexes, or default values.
It only creates the columns that were selected, and copies the data.












ALL	            TRUE if all of the subquery values meet the condition	
AND	            TRUE if all the conditions separated by AND is TRUE	
ANY	            TRUE if any of the subquery values meet the condition	
BETWEEN	        TRUE if the operand is within the range of comparisons	
EXISTS	        TRUE if the subquery returns one or more records	
IN	            TRUE if the operand is equal to one of a list of expressions	
LIKE	        TRUE if the operand matches a pattern	
NOT	            Displays a record if the condition(s) is NOT TRUE	
OR	            TRUE if any of the conditions separated by OR is TRUE	
SOME	        TRUE if any of the subquery values meet the condition








ALTER COMMAND 
==============
-- 1. Add a new column
ALTER TABLE Employees
ADD gender CHAR(1);

-- 2. Add a new constraint (example: CHECK constraint)
ALTER TABLE Employees
ADD CONSTRAINT chk_gender CHECK (gender IN ('M', 'F'));

-- 3. Drop a column
ALTER TABLE Employees
DROP COLUMN phone_number;

-- 4. Rename a column
ALTER TABLE Employees
RENAME COLUMN salary TO base_salary;

-- 5. Modify column data type
ALTER TABLE Employees
MODIFY base_salary DECIMAL(12, 2);

-- 6. Drop a constraint
ALTER TABLE Employees
DROP CONSTRAINT chk_gender;

-- 7. Rename the table
ALTER TABLE Employees
RENAME TO Staff;





Constraints
============

CREATE TABLE Employees (
    employee_id INT PRIMARY KEY,                          -- Unique and NOT NULL
    first_name VARCHAR(50) NOT NULL,                      -- Cannot be null
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,                            -- Must be unique
    phone_number VARCHAR(15),
    hire_date DATE DEFAULT CURRENT_DATE,                  -- Default value
    salary DECIMAL(10, 2) CHECK (salary >= 0),            -- Must be non-negative
    department_id INT,
    CONSTRAINT fk_department FOREIGN KEY (department_id)  -- Foreign key
    REFERENCES Departments(department_id)
);










Type	                    Use Case	                                                    Example
Single-Column Index	        A single column for fast search.	                            CREATE INDEX idx_name ON Employees(Name);
Composite Index	            Multiple columns to speed up queries.	                        CREATE INDEX idx_name_age ON Employees(Name, Age);
Unique Index	            Ensures no duplicate values in a column.	                    CREATE UNIQUE INDEX idx_email ON Employees(Email);
Full-Text Index	            Efficient text searching in large text fields.	                CREATE FULLTEXT INDEX idx_desc ON Articles(Description);
Clustered Index	            Sorts data rows physically in table.	                        CREATE CLUSTERED INDEX idx_salary ON Employees(Salary);
Non-Clustered               Index	Separate structure, does not affect data storage.	    CREATE NONCLUSTERED INDEX idx_department ON Employees(Department);
Bitmap Index	            Low-cardinality columns with limited distinct values.	        CREATE BITMAP INDEX idx_gender ON Employees(Gender);
Hash Index	                Exact match queries using hash values.	                        CREATE INDEX idx_id_hash ON Employees(EmployeeID) USING HASH;





sysdate vs current_timestamp;
=============================

in sysdate the time will change after every sec like select sysdate sleep(1000) sysdate both time will be different
but in case of current_timestamp it will same 

select sysdate,current_timestamp;
sleep(10000)
select sysdate,current_timestamp;

HERE TIME WILL CHANGE IN BOTH CASES



DATE FUNCTIONS
===============
day("date") => return day of that date
SELECT ADDDATE("2017-06-15", INTERVAL 10 YEAR); => add 10 years, otehr values can be hour minute second    
extract(hour/minute/date... from date);



***************
CURRENT_TIMESTAMP (Server's UTC time):
server time => 10:30:00;

Server ka time UTC hoga. Agar server UTC pe hai, toh user ko UTC time dikhayi dega.
Example output: 2025-04-16 10:30:00 (UTC)
LOCALTIMESTAMP (User's local time - IST):
User's local time ko adjust karke IST time dikhayi dega.
Example output: 2025-04-16 15:00:00 (IST)




ifNull vs coalesce
==================
if null will replace default value if find null
coalesce will return first not null value from multiple attributes



CURRENT_USER();
==============
return current user





INDEX,VIEWS,PROCEDURES,TRIGGERS
===============================
CREATE INDEX index_name ON table_name (column_name);
CREATE VIEW viewname as (query)




1.SIMPLE PROCEDURE
=================
CREATE PROCEDURE GreetUser()
BEGIN
    SELECT 'Hello, this is a simple procedure!' AS message;
END $$
CALL GreetUser();


2.PROCEDURE WITH INPUT
=======================
CREATE PROCEDURE GreetUser(IN name VARCHAR(50))
BEGIN
    SELECT CONCAT('Hello, ', name, '!') AS greeting;
END $$
CALL GreetUser('Amit');


3.PROCEDURE WITH OUTPUT
=======================
CREATE PROCEDURE add_num(OUT result INT)
BEGIN
    SET result += 2;
END $$
SET @varName = 2;
CALL add_num(@varName);
SELECT @varName;


4.PROCEDURE WITH INOUT
=======================
CREATE PROCEDURE add_num(OUT result INT)
BEGIN
    SET result = 2;
END $$
CALL add_num(@varName);
SELECT @varName;


5.PROCEDURE WITH DECLARE VARIABLES
==================================
CREATE PROCEDURE triple(IN id INT)
BEGIN
    DECLARE empDetails VARCHAR(25);
    SELECT emp_name INTO empDetails FROM emp WHERE emp_id = id;
    SELECT CONCAT('Employee Name is: ', empDetails) AS Result;
END $$


6.PROCEDURE WITH IF ELSE
==================================
CREATE PROCEDURE triple(IN id INT)
BEGIN
    DECLARE empDetails VARCHAR(25);
    SELECT emp_name INTO empDetails FROM emp WHERE emp_id = id;
    SELECT CONCAT('Employee Name is: ', empDetails) AS Result;
END $$


7. PROCEDURE WITH LOOPS
=======================
DELIMITER $$
CREATE PROCEDURE print_while(IN n INT)
BEGIN
    DECLARE i INT DEFAULT 1;

    WHILE i <= n DO
        SELECT i AS number;
        SET i = i + 1;
    END WHILE;
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE print_repeat(IN n INT)
BEGIN
    DECLARE i INT DEFAULT 1;

    REPEAT
        SELECT i AS number;
        SET i = i + 1;
    UNTIL i > n
    END REPEAT;
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE sum_upto(IN n INT)
BEGIN
    DECLARE total INT DEFAULT 0;

    sum_loop: LOOP
        IF n <= 0 THEN
            LEAVE sum_loop;
        END IF;

        SET total = total + n;
        SET n = n - 1;
    END LOOP sum_loop;

    SELECT total AS SumOfNumbers;
END $$
DELIMITER ;



DROP PROCEDURE IF EXISTS procedure_name;
show procedure status where db = "demo";














Indexing
=========


1. NONCLUSTERED INDEXING => FOR FAST retrieval AS IT CRATESA DIFFERENT STRUCTRUE HAVING POINTERS
=================================================================================================
CREATE INDEX index_name ON table_name(column,column1)

2. FULLTEXT INDEXING
====================
create fulltext index index_name on emp(emp_email);


show indexes from table_name;
drop index index_name on table_name














TRIGGERS
=========
CREATE TRIGGER trigger_name
trigger_time trigger_event
ON table_name
FOR EACH ROW
trigger_body;


trigger_name: Trigger ka naam.
trigger_time: Jab trigger execute hoga. Yeh BEFORE ya AFTER ho sakta hai.
trigger_event: Jo event trigger karega (INSERT, UPDATE, DELETE).
table_name: Table jisme trigger apply hoga.
trigger_body: Wo SQL statements jo trigger execute karega.







**************
Types of indexes
================
primary, unique, non-unique/normal, spatial => geographical, Composite, foreign key => referential integrity



STORAGE ENGINE
=-=-=-=-=-=-=-
Storage engine ek plugin system hai MySQL ka, jo batata hai:
Data kaise store hoga disk pe
Transactions support honge ya nahi
Indexes kaise handle honge
Locking mechanism kya hoga (row-level vs table-level)

MyISAM 
pros => Read operations ke liye super fast
cons => no support for transaction, no foreign keys, ek user likh raha ho toh doosra wait karega 

InnoDB 
pros => acid prop, commit/rollback foreign key
cons => slower than myISAM and more usage

memory
pros => superfast - stored in ram , best for temp tables
cons => Data volatile – server restart = sab gayab

csv
pros => data stored as csv files, easily import/export
cons => no indexing, not for production








🔹 1. Functionality / Usage
DELETE is used when we want to remove specific rows from a table based on a condition.
TRUNCATE is used to quickly remove all rows from a table — it's like a reset.
🧠 Logic:
Use DELETE when you need control (e.g. delete only old records),
and TRUNCATE when you want to clear the table completely.

🔹 2. WHERE Clause
DELETE supports WHERE clause → allows conditional deletion.
TRUNCATE does not support WHERE → deletes everything.
🧠 Logic:
DELETE is flexible, TRUNCATE is blunt.

🔹 3. Transaction & Rollback
DELETE is DML (Data Manipulation Language) → fully transactional. Can be rolled back.
TRUNCATE is DDL (Data Definition Language) → behaves like a table re-creation, rollback not guaranteed (depends on storage engine, e.g. InnoDB supports it).
🧠 Logic:
Use DELETE in critical operations where rollback is a must.

🔹 4. Performance / Speed
DELETE deletes rows one by one, logging each row → slow for large datasets.
TRUNCATE just deallocates the data pages, no per-row logging → much faster.
🧠 Logic:
TRUNCATE is preferred for performance when you don't need to track individual row deletions.

🔹 5. AUTO_INCREMENT Reset
DELETE does not reset AUTO_INCREMENT counter.
TRUNCATE resets it to zero (or starting value).
🧠 Logic:
Use TRUNCATE when you want a clean slate, including fresh IDs.

🔹 6. Triggers
DELETE fires triggers (e.g. BEFORE DELETE, AFTER DELETE).
TRUNCATE does not fire any triggers.
🧠 Logic:
Use DELETE when your logic depends on trigger-based actions.









GRANT SELECT,INSERT ON database_name.* to 'username'@'localhost'


DATETIME: If User 1 in India inserts a date, and User 2 in the USA fetches it,
User 2 will see the exact same time as it was entered by User 1,
without any time zone conversion. 
This might lead to confusion because the times will be interpreted differently
depending on their local time zones.

TIMESTAMP: If User 1 in India inserts a date, and User 2 in the USA fetches it, 
the time will be converted to UTC when stored, 
and then converted back to User 2’s local time (USA time zone) when they retrieve it. 
This ensures that the same moment in time is reflected correctly for both users,
 adjusted for their respective time zones.





ROLLBACK TO SAVEPOINT savepoint_name;


Order Matters: Composite index mein columns ka order important hai. Agar aap query mein pehle 
Department filter karte ho aur baad mein JoinDate, toh yeh index efficiently work karega.
Composite Index aapke multi-column queries ko optimize karta hai.
Index Columns ka Order aur Query ke Type par yeh kaafi depend karta hai.
Agar aapko performance boost chahiye aur aap multiple columns ko query karte ho, toh composite index helpful ho sakta hai.



no server affect
================
ADDDATE => ADDDATE(date, 1month/1 year/1 day)
SUBDATE => ADDDATE(date, 1month/1 year/1 day)
ADDTIME => ADDDATE(date, 1 Hour/1 minute/1 second)
TIMEDIFF("12:19:10", "12:15:37")

server affect
=============
CURRENT_TIMESTAMP/CURRENT_DATE/CURRENT_TIME
SYSDATE



NOW VS SYSDATE
==============
SELECT NOW() AS Now_Timestamp, SYSDATE() AS SysDate_Timestamp;
SELECT SLEEP(5);  -- Pauses execution for 5 seconds
SELECT NOW() AS Now_After_Sleep, SYSDATE() AS SysDate_After_Sleep;


iss case mein now dono jagah same time dega but in case of sysdate ye alag alag dega